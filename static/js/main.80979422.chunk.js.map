{"version":3,"sources":["lib/utils.js","components/Result.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","mostCitations","dataset","max","i","length","inCitations","console","log","filterRecency","recency","filtered","year","push","filterQuality","qualityFilter","includes","journalQuality","quicksort","arrIn","start","end","arr","pivot","marker","tmp","this","toSimilarityEncoding","metadata","Object","prototype","toString","call","simEncodings","sortedInCitations","sort","sortedOutCitations","outCitations","doi","binarySearch","data","min","toSearch","mid","Math","floor","similarityScores","query","inCitationCount","outCitationCount","inCount","inCitationPercentage","outCount","simScore","toFixed","similarity","compare","a","b","getFullMetadata","simScores","mostSimilar","slice","fullData","j","Result","props","state","colour","className","style","backgroundColor","rank","title","author","journal","abstract","href","link","target","React","Component","testCorp","require","utils","App","doiChangedHandler","e","value","setState","searchDOI","searchHandler","fetch","then","response","json","filteredPaper","relevantMetadata","key","notEnoughDataError","searchYear","searchQuality","simList","toDisplay","display","catch","error","searchError","alert","searchQualityList","undefined","arrYears","results","authorDisplay","type","placeholder","onChange","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.80979422.chunk.js","sourcesContent":["module.exports = {\r\n    mostCitations(dataset){\r\n      let max = dataset[0];\r\n      for(var i=0; i<dataset.length; i++){\r\n        if (dataset[i].inCitations.length >= max.inCitations.length){\r\n          max = dataset[i];\r\n        }\r\n      }\r\n      console.log(max);\r\n    },\r\n\r\n\r\n    filterRecency(dataset, recency){\r\n        var filtered = []\r\n        for(var i=0; i<dataset.length; i++){\r\n          if (dataset[i].year >= recency){\r\n            filtered.push(dataset[i]);\r\n          } else {\r\n            continue;\r\n          }\r\n        }\r\n        return filtered\r\n      },\r\n      \r\n    filterQuality(dataset, qualityFilter){\r\n        var filtered = [];\r\n        //filter by quality\r\n        for(var i=0; i<dataset.length; i++){\r\n          //if journal quality meets criteria, append to filtered and return\r\n          if(qualityFilter.includes(dataset[i].journalQuality)){\r\n            filtered.push(dataset[i]);\r\n          }\r\n        }\r\n        return filtered;\r\n      },\r\n      \r\n      //implementation of quicksort. Some inspiration from https://stackabuse.com/quicksort-in-javascript/\r\n      quicksort(arrIn, start, end){\r\n        var arr = arrIn;\r\n        if (start >= end){\r\n          return arr;\r\n        }\r\n        //initialise pivot and marker\r\n        var pivot = end - 1;\r\n        var marker = start;\r\n        //go through, put smaller elements on left and larger on right\r\n        for(var i = start; i < pivot; i++){\r\n          if(arr[i] < arr[pivot]){\r\n            var tmp = arr[i];\r\n            arr[i] = arr[marker];\r\n            arr[marker] = tmp;\r\n            marker++;\r\n          }\r\n        }\r\n      \r\n        //place pivot in the middle\r\n        var tmp = arr[pivot];\r\n        arr[pivot] = arr[marker];\r\n        arr[marker] = tmp;\r\n      \r\n        //recurse\r\n        this.quicksort(arr, start, marker);\r\n        this.quicksort(arr, marker + 1, end);\r\n      },\r\n      \r\n      //implementation of overloading in JS with citation similarity\r\n      toSimilarityEncoding(metadata){\r\n        //if array (ie list of filtered papers) return list of data\r\n        if (Object.prototype.toString.call(metadata) == \"[object Array]\"){\r\n          //TODO----------------------------------------------------------------------: replace with quicksort\r\n          var simEncodings = []\r\n          for(var i=0; i<metadata.length; i++){\r\n            //var sortedInCitations = quicksort(metadata[i].inCitations, 0, metadata[i].inCitations.length);\r\n            //var sortedOutCitations = quicksort(metadata[i].outCitations, 0, metadata[i].outCitations.length);\r\n            var sortedInCitations = metadata[i].inCitations.sort();\r\n            var sortedOutCitations = metadata[i].outCitations.sort();\r\n            simEncodings.push({\r\n              inCitations: sortedInCitations,\r\n              outCitations: sortedOutCitations,\r\n              doi: metadata[i].doi\r\n            });\r\n          }\r\n          return simEncodings;\r\n        } \r\n        \r\n        //otherwise, input will be the query paper object\r\n        else {\r\n          var sortedInCitations = metadata.inCitations.sort();\r\n          var sortedOutCitations = metadata.outCitations.sort();\r\n          var querySim = {\r\n            inCitations: sortedInCitations,\r\n            outCitations: sortedOutCitations,\r\n            doi: metadata.doi\r\n          };\r\n          return querySim;\r\n        }\r\n      },\r\n      \r\n      //binary search 0 - helper function for similarityScores\r\n      binarySearch(data, min, max, toSearch){\r\n        if (max < min){return -1};\r\n        //get middle value to use for binary search\r\n        var mid = Math.floor((max + min)/2);\r\n      \r\n        console.log(data[mid].doi);\r\n        console.log(toSearch);\r\n      \r\n        if (data[mid].doi === toSearch) {\r\n          return mid;\r\n        } else if (data[mid].doi > toSearch){\r\n          return this.binarySearch(data, min, mid-1, toSearch);\r\n        } else {\r\n          return this.binarySearch(data, mid+1, max, toSearch);\r\n        }\r\n      },\r\n      \r\n      similarityScores(query, metadata){\r\n        //loop through metadata and calculate similarity scores for each paper\r\n        var similarityScores = [];\r\n        if('authors' in query){\r\n          for(var i=0; i<metadata.length; i++){\r\n            //skip over if the query paper is found in the metadata\r\n            if(metadata[i].doi === query.doi){\r\n              continue;\r\n            }\r\n  \r\n            //calculate percentage of query citations that are in the in- and out-citations of other paper\r\n            var inCitationCount = 0;\r\n            var outCitationCount = 0;\r\n        \r\n            //calculate inCitations match percentage\r\n            for(var inCount=0; inCount<query.inCitations.length; inCount++){\r\n              if(metadata[i].inCitations.includes(query.inCitations[inCount])){\r\n                inCitationCount++;\r\n              }\r\n            }\r\n            var inCitationPercentage = (inCitationCount/query.inCitations.length);\r\n        \r\n            //calculate outCitations match percentage\r\n            for(var outCount=0; outCount<query.inCitations.length; outCount++){\r\n              if(metadata[i].outCitations.includes(query.outCitations[outCount])){\r\n                outCitationCount ++;\r\n              }\r\n            }\r\n            var outCitationPercentage = (outCitationCount/query.outCitations.length);\r\n        \r\n            //convert to a similarity score by computing a weighted average of percentages and round to 2 d.p.\r\n            var weightedInSim = inCitationPercentage * 3;\r\n            var simScore = (((weightedInSim + outCitationPercentage)/4)*1000).toFixed(0);\r\n\r\n            if(simScore > 100){simScore = 100};\r\n            //append to simScore similarityScores array, along with paper DOI\r\n            similarityScores.push({\r\n              similarity: simScore,\r\n              doi: metadata[i].doi\r\n            });\r\n          }\r\n        }\r\n        return similarityScores;\r\n      },\r\n      \r\n      //compare helper function for getFullMetadata\r\n      compare(a, b){\r\n        if (a.similarity < b.similarity){return 1;} \r\n        else if (a.similarity > b.similarity){return -1;} \r\n        else {return 0;}\r\n      },\r\n      \r\n      //get all the metadata for the filtered papers from the database\r\n      getFullMetadata(simScores, metadata){\r\n        //get 100 most similar records from simScores. Sort by similarity\r\n        var mostSimilar = simScores.sort(this.compare).slice(0, 5);\r\n        \r\n        //var tmpSearch = mostSimilar[0].doi;\r\n        //console.log('tmpSearch:' + tmpSearch);\r\n        //console.log(this.binarySearch(metadata, 0, (metadata.length -1), tmpSearch));\r\n      \r\n        var fullData = [];\r\n        for(var i=0; i<mostSimilar.length; i++){\r\n          for (var j=0; j<metadata.length; j++){\r\n            if(mostSimilar[i].doi == metadata[j].doi){\r\n              console.log(\"found one\");\r\n              fullData.push({\r\n                ...metadata[j],\r\n                similarity: mostSimilar[i].similarity\r\n              })\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        return fullData;\r\n      }\r\n}","import React from 'react';\r\nimport './Result.css';\r\n\r\nexport default class Result extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n    render() {\r\n        let colour = [(100-this.props.similarity)*2.55, 2.55 * this.props.similarity,  0];\r\n        return(\r\n            <div className=\"result\">\r\n                <button className=\"score\" \r\n                    style={{backgroundColor: 'rgb('+ colour[0]+','+colour[1]+','+colour[2]+')'}}\r\n                >{this.props.similarity}</button>\r\n                <h1 className=\"rank\">{this.props.rank}</h1>\r\n                <h2 className=\"title\">{this.props.title}</h2>\r\n                <p className=\"info\">{this.props.author}{this.props.year} in {this.props.journal} ({this.props.journalQuality})</p>\r\n                <p className=\"abstract\">{this.props.abstract}</p>\r\n                <a href={this.props.link} target=\"_blank\" className=\"link\">Link to full text</a>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\nimport './App.css';\nimport Result from './components/Result';\n\nvar testCorp = require('./data/test_export.json');\nvar utils = require('./lib/utils.js');\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      searchDOI: \"\",\n      searchYear: 2016,\n      searchQuality: \"Q1\",\n      searchQualityList: ['Q1'],\n      searchError: false,\n      notEnoughDataError: false,\n      display: undefined\n    }\n  }\n\n  //retrieve the paper metadata from the Semantic Scholar API, and store its metadata in the state\n  getPaper(){\n    fetch(\"https://api.semanticscholar.org/v1/paper/\"+this.state.searchDOI)\n    .then((response) => response.json())\n    //on success - i.e. a paper with the DOI was found\n    .then((data) => {\n      var filteredPaper = {};\n      //keep only relevant metadata - abstract and citations needs to be renamed because name is inconsistent\n      filteredPaper['paperAbstract'] = data['abstract'];\n      filteredPaper['id'] = data['paperId'];\n      filteredPaper['inCitations'] = [];\n      for (var i = 0; i < data['citations'].length; i++){\n        filteredPaper['inCitations'].push(data['citations'][i]['paperId']);\n      }\n      filteredPaper['outCitations'] = filteredPaper['inCitations'];\n\n      //get relevant metadata\n      var relevantMetadata = ['title', 'fieldsOfStudy',\n      'pdfUrls', 'authors', 'year', 'journalName', 'doi', 'doiUrl'];\n      for(var key = 0; key < relevantMetadata.length; key++){\n        filteredPaper[relevantMetadata[key]] = data[relevantMetadata[key]];\n      }\n\n      //checking that there are citations for the paper\n      if (!('inCitations' in filteredPaper) || !('outCitations' in filteredPaper)){\n        this.state.notEnoughDataError = true;\n        console.log(this.state.notEnoughDataError);\n      }\n\n      return filteredPaper;\n    }\n    ) \n    \n    .catch((error) => {\n      this.state.searchError = true;\n      console.log(this.state.searchError);\n      console.log(error);\n    });\n  }\n\n  doiChangedHandler = (e) => {\n    console.log(e.target.value);\n    this.setState({searchDOI: e.target.value}, () => {\n      console.log(this.state.searchDOI);\n    });\n  }\n\n  searchHandler = (e) => {\n    fetch(\"https://api.semanticscholar.org/v1/paper/\"+this.state.searchDOI)\n    .then((response) => response.json())\n    //on success - i.e. a paper with the DOI was found\n    .then((data) => {\n      var filteredPaper = {};\n      //keep only relevant metadata - abstract and citations needs to be renamed because name is inconsistent\n      filteredPaper['paperAbstract'] = data['abstract'];\n      filteredPaper['id'] = data['paperId'];\n      filteredPaper['inCitations'] = [];\n      for (var i = 0; i < data['citations'].length; i++){\n        filteredPaper['inCitations'].push(data['citations'][i]['paperId']);\n      }\n      filteredPaper['outCitations'] = filteredPaper['inCitations'];\n\n      //get relevant metadata\n      var relevantMetadata = ['title', 'fieldsOfStudy',\n      'pdfUrls', 'authors', 'year', 'journalName', 'doi', 'doiUrl'];\n      for(var key = 0; key < relevantMetadata.length; key++){\n        filteredPaper[relevantMetadata[key]] = data[relevantMetadata[key]];\n      }\n\n      //checking that there are citations for the paper\n      if (!('inCitations' in filteredPaper) || !('outCitations' in filteredPaper)){\n        this.state.notEnoughDataError = true;\n        console.log(this.state.notEnoughDataError);\n      }\n\n      let filtered = utils.filterRecency(testCorp, this.state.searchYear);\n      filtered = utils.filterQuality(filtered, this.state.searchQuality);\n      const simList = utils.toSimilarityEncoding(filtered);\n      const simScores = utils.similarityScores(filteredPaper, simList);\n      const toDisplay = utils.getFullMetadata(simScores, filtered);\n\n      console.log(toDisplay);\n      this.setState({\n        display: toDisplay\n      })\n    }) \n    \n    .catch((error) => {\n      this.state.searchError = true;\n      console.log(this.state.searchError);\n      console.log(error);\n\n      alert(\"There is an error in the search term. Please ensure that the correct Digital Object Identifier (DOI) is input.\");\n    });\n\n  };\n\n  render(){\n    utils.mostCitations(testCorp);\n\n    let arrYears = [];\n    for (var i = 2021; i >= 1970; i--){\n      arrYears.push(<option value={i}>{i}</option>);\n    }\n\n    //to display the results\n    let results = [];\n    if(this.state.display){\n      for (var i = 0; i < this.state.display.length; i++){\n        //to display the authors\n        let authorDisplay = []\n        for (var j = 0; j < this.state.display[i]['authors'].length; j++){\n          authorDisplay.push(\n            <p style={{display: \"inline\"}}>{this.state.display[i]['authors'][j]['name']}, </p>\n          );\n        }\n    \n        results.push(\n          <Result \n            rank={i+1}\n            title={this.state.display[i]['title']}\n            author={authorDisplay}\n            year={this.state.display[i]['year']}\n            journal={this.state.display[i]['journalName']}\n            journalQuality={this.state.display[i]['journalQuality']}\n            similarity={this.state.display[i]['similarity']}\n            abstract={this.state.display[i]['paperAbstract']}\n            link={this.state.display[i]['pdfUrls'][0]}\n          />\n        );\n      }\n    }\n\n    return (\n      <div className=\"App\">\n        <h1 className=\"heading\">Journal Similarity Search</h1>\n        <input className=\"doi_in\" type=\"text\" placeholder=\"Paper DOI\" value={this.state.searchDOI}\n            onChange={this.doiChangedHandler}></input>\n        <select className=\"quality_in\" value={this.state.searchQuality}\n          onChange={(e) => this.setState({\n            searchQuality: e.target.value\n          })}>\n          <option value=\"Q1\">Q1</option>\n          <option value=\"Q2\">Q2</option>\n          <option value=\"Q3\">Q3</option>\n          <option value=\"Q4\">Q4</option>\n        </select>\n        <select className=\"year_in\" value={this.state.searchYear}\n          onChange={(e) => this.setState({searchYear: e.target.value})}>\n          {arrYears}\n        </select>\n        <button className=\"search\" onClick={this.searchHandler}>Search</button>\n        {results}\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}